/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.52
 * Generated at: 2021-12-15 08:56:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.findStore;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class findStoreForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/milkyWayForest/css/findStore.css\">\r\n");
      out.write("\r\n");
      out.write("<div id=\"findStoreDiv\">\r\n");
      out.write("	<div id=\"storeList\">\r\n");
      out.write("		<div id=\"storeFindSubject\">매장찾기</div>\r\n");
      out.write("		<div id=\"storeListBorder\"></div>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div id=\"storeMap\"></div>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=9430d87716e33fcf4d177c0233ad2b94&libraries=services\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("	\r\n");
      out.write("	let positions = new Array();\r\n");
      out.write("	let now_x = 37.55855218147396; // 위도\r\n");
      out.write("	let now_y = 126.94597385565802; // 경도\r\n");
      out.write("	let aa;\r\n");
      out.write("\r\n");
      out.write("	let mapContainer = document.getElementById('storeMap'), // 지도를 표시할 div \r\n");
      out.write("		mapOption = { //지도를 생성할 때 필요한 기본 옵션\r\n");
      out.write("			center: new kakao.maps.LatLng(now_x, now_y), // 지도의 중심좌표\r\n");
      out.write("			level: 4, // 지도의 확대 레벨\r\n");
      out.write("			mapTypeId : kakao.maps.MapTypeId.ROADMAP // 지도종류\r\n");
      out.write("		}; \r\n");
      out.write("\r\n");
      out.write("	// 지도를 생성한다 \r\n");
      out.write("	let map = new kakao.maps.Map(mapContainer, mapOption); \r\n");
      out.write("\r\n");
      out.write("	// 지도에 확대 축소 컨트롤을 생성한다\r\n");
      out.write("	let zoomControl = new kakao.maps.ZoomControl();\r\n");
      out.write("\r\n");
      out.write("	// 지도의 우측에 확대 축소 컨트롤을 추가한다\r\n");
      out.write("	map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\r\n");
      out.write("\r\n");
      out.write("	//실시간 현재 위치 https://apis.map.kakao.com/web/sample/geolocationMarker/\r\n");
      out.write("	// HTML5의 geolocation으로 사용할 수 있는지 확인합니다 \r\n");
      out.write("	if (navigator.geolocation) {\r\n");
      out.write("	    function geo_success(position) { \r\n");
      out.write("	    	var lat = position.coords.latitude, // 위도\r\n");
      out.write("	            lon = position.coords.longitude; // 경도\r\n");
      out.write("	        \r\n");
      out.write("	        var locPosition = new kakao.maps.LatLng(lat, lon), // 마커가 표시될 위치를 geolocation으로 얻어온 좌표로 생성합니다\r\n");
      out.write("	            message = '<div style=\"padding:5px;\">현재위치</div>'; // 인포윈도우에 표시될 내용입니다\r\n");
      out.write("	        \r\n");
      out.write("	        // 마커와 인포윈도우를 표시합니다\r\n");
      out.write("	        displayMarker(locPosition, message); \r\n");
      out.write("			alert('와이파이 이용시 정확도가 다소 떨어질 수 있습니다');\r\n");
      out.write("			\r\n");
      out.write("	        now_x = lat;\r\n");
      out.write("	        now_y = lon;\r\n");
      out.write("	        \r\n");
      out.write("			getStore();\r\n");
      out.write("    	}\r\n");
      out.write("	    \r\n");
      out.write("	    function geo_error() {\r\n");
      out.write("	    	alert(\"위치 정보를 사용할 수 없습니다.\"); \r\n");
      out.write("	    	\r\n");
      out.write("	    	getStore();\r\n");
      out.write("    	}\r\n");
      out.write("	    \r\n");
      out.write("	    var geo_options = {\r\n");
      out.write("    		enableHighAccuracy: true, // 불리언 \r\n");
      out.write("    		maximumAge : 30000, // 천분의 1초 단위 \r\n");
      out.write("    		timeout : 27000 // 천분의 1초 단위 \r\n");
      out.write("   		};\r\n");
      out.write("	    \r\n");
      out.write("	    // GeoLocation을 이용해서 접속 위치를 얻어옵니다\r\n");
      out.write("	    navigator.geolocation.getCurrentPosition(geo_success, geo_error, geo_options);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	    var watcherID = navigator.geolocation.watchPosition(geo_success, geo_error, geo_options);\r\n");
      out.write("	    \r\n");
      out.write("	    navigator.geolocation.clearWatch(watcherID); // 위치 갱신 그만 두기\r\n");
      out.write("\r\n");
      out.write("	} else { // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\r\n");
      out.write("	    \r\n");
      out.write("	    var locPosition = new kakao.maps.LatLng(37.4992856, 127.0285939),    \r\n");
      out.write("	        message = '현재 위치를 찾을 수 없습니다'\r\n");
      out.write("	        \r\n");
      out.write("	    displayMarker(locPosition, message);\r\n");
      out.write("	\r\n");
      out.write("	    getStore();\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// 지도에 마커와 인포윈도우를 표시하는 함수입니다\r\n");
      out.write("	function displayMarker(locPosition, message) {\r\n");
      out.write("\r\n");
      out.write("	    // 마커를 생성합니다\r\n");
      out.write("	    var marker = new kakao.maps.Marker({  \r\n");
      out.write("	        map: map, \r\n");
      out.write("	        position: locPosition\r\n");
      out.write("	    }); \r\n");
      out.write("	    \r\n");
      out.write("	    var iwContent = message, // 인포윈도우에 표시할 내용\r\n");
      out.write("	        iwRemoveable = true;\r\n");
      out.write("\r\n");
      out.write("	    // 인포윈도우를 생성합니다\r\n");
      out.write("	    var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("	        content : iwContent,\r\n");
      out.write("	        removable : iwRemoveable\r\n");
      out.write("	    });\r\n");
      out.write("	    \r\n");
      out.write("	    // 인포윈도우를 마커위에 표시합니다 \r\n");
      out.write("	    //infowindow.open(map, marker);\r\n");
      out.write("	    \r\n");
      out.write("	    // 지도 중심좌표를 접속위치로 변경합니다\r\n");
      out.write("	    map.setCenter(locPosition);      \r\n");
      out.write("	}   \r\n");
      out.write("	\r\n");
      out.write("	function getStore() {\r\n");
      out.write("		//스타벅스 매장\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			type: 'post',\r\n");
      out.write("			url: '/milkyWayForest/findStore/getStore',\r\n");
      out.write("			data: { 'now_x': now_x,\r\n");
      out.write("					'now_y': now_y },\r\n");
      out.write("			success: function(data){\r\n");
      out.write("				console.log(JSON.stringify(data));\r\n");
      out.write("				$.each(data, function(index, items){\r\n");
      out.write("					let json = new Object();\r\n");
      out.write("					json = {'title': items.storeName,\r\n");
      out.write("							'latlng': new kakao.maps.LatLng(items.storeX, items.storeY),\r\n");
      out.write("							'storeUrl': items.storeUrl}\r\n");
      out.write("					positions.push(json);\r\n");
      out.write("	\r\n");
      out.write("					\r\n");
      out.write("					$('<div>',{\r\n");
      out.write("						class: 'storeList',\r\n");
      out.write("						id: 'storeList'+index\r\n");
      out.write("					}).append($('<div>',{\r\n");
      out.write("						text: '스타벅스 '+items.storeName+'점',\r\n");
      out.write("						class: 'storeName',\r\n");
      out.write("						id: 'storeName'+index\r\n");
      out.write("					})).append($('<div>',{\r\n");
      out.write("						text: items.storeLocation,\r\n");
      out.write("						class: 'storeLocation'\r\n");
      out.write("					})).append($('<div>',{\r\n");
      out.write("						class: 'storePin'\r\n");
      out.write("					}).append($('<img>',{\r\n");
      out.write("						src: '//image.istarbucks.co.kr/common/img/store/pin/pin_general.png',\r\n");
      out.write("						width: '35px',\r\n");
      out.write("						height: '55px',\r\n");
      out.write("						id: 'storePin'+index\r\n");
      out.write("					}))).appendTo($('#storeListBorder'))\r\n");
      out.write("					\r\n");
      out.write("				});\r\n");
      out.write("	\r\n");
      out.write("				\r\n");
      out.write("					// 마커의 이미지 주소\r\n");
      out.write("					let imageSrc = \"//image.istarbucks.co.kr/common/img/store/pin/pin_general.png\"; \r\n");
      out.write("					\r\n");
      out.write("					// 마커 이미지 크기\r\n");
      out.write("					let imageSize = new kakao.maps.Size(35, 55);\r\n");
      out.write("					\r\n");
      out.write("					// 마커 이미지 생성\r\n");
      out.write("					let markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize);\r\n");
      out.write("				\r\n");
      out.write("					// 지도에 마커를 생성하고 표시한다\r\n");
      out.write("					$.each(positions, function(index, items){\r\n");
      out.write("	\r\n");
      out.write("						// 마커 생성\r\n");
      out.write("						let marker = new kakao.maps.Marker({\r\n");
      out.write("							map: map, // 마커를 표시할 지도\r\n");
      out.write("							position: items.latlng, // 마커를 표시할 위치\r\n");
      out.write("							title: items.title, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시\r\n");
      out.write("							image: markerImage // 마커 이미지\r\n");
      out.write("						});\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("						// 마커 위에 표시할 인포윈도우를 생성한다\r\n");
      out.write("						let infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("							content : '<div class=\"infoWindow\" id=\"infoWindow'+index+'\" style=\"padding:5px; font-size: 10pt;\">스타벅스 '+items.title+'점</div>' // 인포윈도우에 표시할 내용\r\n");
      out.write("						});\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("						// 마커에 클릭 이벤트를 등록한다 (우클릭 : rightclick)\r\n");
      out.write("						kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("							infowindow.open(map, marker);\r\n");
      out.write("							if(aa) {\r\n");
      out.write("								aa.hide();\r\n");
      out.write("							} \r\n");
      out.write("							aa = $('#infoWindow'+index).parent().parent();\r\n");
      out.write("							aa.show();\r\n");
      out.write("							\r\n");
      out.write("							$('.infoWindow').click(function(){\r\n");
      out.write("								window.open(items.storeUrl);\r\n");
      out.write("							})\r\n");
      out.write("						});\r\n");
      out.write("						\r\n");
      out.write("						$('#findStoreDiv').on('click', '#storeList'+index, function() {\r\n");
      out.write("							infowindow.open(map, marker);\r\n");
      out.write("							if(aa) {\r\n");
      out.write("								aa.hide();\r\n");
      out.write("							} \r\n");
      out.write("							aa = $('#infoWindow'+index).parent().parent();\r\n");
      out.write("							aa.show();\r\n");
      out.write("							\r\n");
      out.write("							$('.infoWindow').click(function(){\r\n");
      out.write("								window.open(items.storeUrl);\r\n");
      out.write("							})\r\n");
      out.write("						});\r\n");
      out.write("						\r\n");
      out.write("					});\r\n");
      out.write("		\r\n");
      out.write("					/* // 인포윈도우를 지도에 표시한다\r\n");
      out.write("					infowindow.open(map, markerNow); */\r\n");
      out.write("			},\r\n");
      out.write("			error: function(err){\r\n");
      out.write("				console.log(err);\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
