/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.52
 * Generated at: 2021-11-26 07:59:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.test;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=, initial-scale=1.0\">\r\n");
      out.write("  <title>Document</title>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"../css/style.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <div id=\"container\">\r\n");
      out.write("    <header id=\"header\">\r\n");
      out.write("      <div id=\"logo\">\r\n");
      out.write("\r\n");
      out.write("      </div>\r\n");
      out.write("      <nav>\r\n");
      out.write("        <ul id=\"topMenu\">\r\n");
      out.write("          <li><a href=\"#\">HOME</a></li>\r\n");
      out.write("          <li><a href=\"#\">아이템</a></li>\r\n");
      out.write("          <li><a href=\"#\">제작</a></li>\r\n");
      out.write("          <li><a href=\"#\">스킬</a></li>\r\n");
      out.write("          <li><a href=\"#\">퀘스트</a></li>\r\n");
      out.write("          <li><a href=\"#\">아바타</a></li>\r\n");
      out.write("          <li><a href=\"#\">선원</a></li>\r\n");
      out.write("          <li><a href=\"#\">호감도</a></li>\r\n");
      out.write("          <li><a href=\"#\">카드</a></li>\r\n");
      out.write("          <li><a href=\"#\">지도</a></li>\r\n");
      out.write("          <li><a href=\"#\">던전/공략</a></li>\r\n");
      out.write("        </ul>\r\n");
      out.write("        <ul id=addMenu>\r\n");
      out.write("          <li><a href=\"#\">스킬정보</a></li>\r\n");
      out.write("          <li><a href=\"#\">스킬 시뮬레이터</a></li>\r\n");
      out.write("          <li><a href=\"#\">대륙/섬 지도</a></li>\r\n");
      out.write("          <li><a href=\"#\">항해지도</a></li>\r\n");
      out.write("          <li><a href=\"#\">로아 타이머</a></li>\r\n");
      out.write("        </ul>\r\n");
      out.write("      </nav>\r\n");
      out.write("    </header>\r\n");
      out.write("    <main>\r\n");
      out.write("      <aside id=\"left-sidebar\">\r\n");
      out.write("        <div><a href=\"#\">로스트아크</a></div>\r\n");
      out.write("        <fieldset>\r\n");
      out.write("          <a href=\"login.jsp\"><input type=\"button\" name=\"login\" value=\"Inven 로그인\"></a>\r\n");
      out.write("          <p><a href=\"write.jsp\" id=\"write\">회원가입</a>&nbsp |<a href=\"#\" id=\"find\">ID/PW 찾기</a></p>\r\n");
      out.write("        </fieldset>\r\n");
      out.write("        <div>\r\n");
      out.write("        	<h3>커뮤니티 게시판</h3>\r\n");
      out.write("        	<br>\r\n");
      out.write("        	<ul>\r\n");
      out.write("        		<li><a href=\"\">자유 게시판</a></li>\r\n");
      out.write("        		<li>질문과 답변</li>\r\n");
      out.write("        		<li>PVP 밸런스 토론</li>\r\n");
      out.write("        		<li>거래 게시판</li>\r\n");
      out.write("        		<li>서버 사건/사고 게시판</li>\r\n");
      out.write("        		<li>길드 모집 게시판</li>\r\n");
      out.write("        		<li>레이드 파티찾기</li>\r\n");
      out.write("        		<li>방송 및 홍보 게시판</li>\r\n");
      out.write("        		<li>사이트 건의/제보</li>\r\n");
      out.write("        	</ul>\r\n");
      out.write("        </div>\r\n");
      out.write("      </aside>\r\n");
      out.write("      <section id=\"contents\">\r\n");
      out.write("        <h2>본문</h2>\r\n");
      out.write("      </section>\r\n");
      out.write("      <aside id=\"right-sidebar\">\r\n");
      out.write("        <h2>사이드바</h2>\r\n");
      out.write("      </aside>\r\n");
      out.write("    </main>\r\n");
      out.write("    <footer id=\"footer\">\r\n");
      out.write("      <h2>푸터</h2>\r\n");
      out.write("    </footer>\r\n");
      out.write("  </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
